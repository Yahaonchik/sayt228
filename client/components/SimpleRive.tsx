import { useEffect, useRef, useState } from 'react';
import { Rive, Layout, Fit, Alignment } from '@rive-app/canvas';

interface ProblemData {
  title: string;
  description: string;
  solution: string;
  color: string;
}

export default function SimpleRive() {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const riveInstanceRef = useRef<Rive | null>(null);
  const [activeModal, setActiveModal] = useState<number | null>(null);

  const problemsData: Record<number, ProblemData> = {
    1: {
      title: "üö™ –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–≤–µ—Ä—Ü–µ–π",
      description: "–î–≤–µ—Ä—Ü–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è",
      solution: "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞–º–∫–∞\n2. ÔøΩÔøΩ–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ü–∏–∫–ª —Å—Ç–∏—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n3. –û—Ç–∫–ª—é—á–∏—Ç–µ –º–∞—à–∏–Ω—É –Ω–∞ 10 –º–∏–Ω—É—Ç\n4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å –¥–≤–µ—Ä—Ü—ã",
      color: "from-red-500 to-red-700"
    },
    2: {
      title: "üíß –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ–¥–æ–π",
      description: "–ù–µ –Ω–∞–±–∏—Ä–∞–µ—Ç –≤–æ–¥—É –∏–ª–∏ –Ω–µ —Å–ª–∏–≤–∞–µ—Ç",
      solution: "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—Ä–∞–Ω –ø–æ–¥–∞—á–∏ –≤–æ–¥—ã\n2. –û—á–∏—Å—Ç–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä —Å–ª–∏–≤–Ω–æ–≥–æ —à–ª–∞–Ω–≥–∞\n3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—ã\n4. –û—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–∏–≤–Ω–æ–π –Ω–∞—Å–æ—Å",
      color: "from-blue-500 to-blue-700"
    },
    3: {
      title: "‚ö° –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–∂–∏–º–æ–º",
      description: "–ù–µ –æ—Ç–∂–∏–º–∞–µ—Ç –±–µ–ª—å–µ –∏–ª–∏ –ø–ª–æ—Ö–æ –æ—Ç–∂–∏–º–∞–µ—Ç",
      solution: "1. –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –±–µ–ª—å–µ\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –º–∞—à–∏–Ω—ã\n3. –û—á–∏—Å—Ç–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä\n4. –£–º–µ–Ω—å—à–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É",
      color: "from-green-500 to-green-700"
    }
  };

  const openProblemOverlay = (problemId: number) => {
    console.log(`üîß Opening problem ${problemId} overlay`);
    setActiveModal(problemId);
  };

  const closeModal = () => {
    setActiveModal(null);
  };

  useEffect(() => {
    if (!canvasRef.current) return;

    const riveInstance = new Rive({
      src: '/untitled.riv',
      canvas: canvasRef.current,
      layout: new Layout({
        fit: Fit.Contain,
        alignment: Alignment.Center,
      }),
      autoplay: true,
      stateMachines: 'State Machine 1',
      onLoad: () => {
        console.log('üéØ Rive –∑–∞–≥—Ä—É–∂–µ–Ω —Å state machine');
      },
      onLoadError: (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Rive:', error);
      },
    });

    riveInstanceRef.current = riveInstance;

    // –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–î–†–û–ë–ù–ê–Ø –û–¢–õ–ê–î–ö–ê statechange —Å–æ–±—ã—Ç–∏–π
    riveInstance.on('statechange', (event) => {
      console.log('üö® ===== RIVE STATECHANGE EVENT START =====');
      console.log('üîÑ Raw event:', event);
      console.log('üîÑ Event type:', typeof event);
      console.log('üîÑ Event constructor:', event?.constructor?.name);
      console.log('üîÑ Event is array:', Array.isArray(event));

      if (event) {
        console.log('üîÑ Event keys:', Object.keys(event));
        console.log('üîÑ Event values:', Object.values(event));
        console.log('üîÑ Event entries:', Object.entries(event));
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
      if (event && typeof event === 'object') {
        console.log('üìã event.name:', event.name);
        console.log('üìã event.stateName:', event.stateName);
        console.log('üìã event.state:', event.state);
        console.log('üìã event.data:', event.data);
        console.log('üìã event.type:', event.type);
        console.log('üìã event.target:', event.target);
        console.log('üìã event.detail:', event.detail);
        console.log('üìã event.machine:', event.machine);
        console.log('üìã event.stateMachine:', event.stateMachine);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ event —ç—Ç–æ –º–∞—Å—Å–∏–≤
        if (Array.isArray(event)) {
          console.log('üìã Event is array, length:', event.length);
          event.forEach((item, index) => {
            console.log(`üìã Array item ${index}:`, item);
            if (item && typeof item === 'object') {
              console.log(`üìã Array item ${index} keys:`, Object.keys(item));
              console.log(`üìã Array item ${index} name:`, item.name);
              console.log(`üìã Array item ${index} stateName:`, item.stateName);
            }
          });
        }

        // –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤
        for (const [key, value] of Object.entries(event)) {
          console.log(`üìã ${key} (${typeof value}):`, value);
          if (value && typeof value === 'object' && !Array.isArray(value)) {
            console.log(`üìã ${key} properties:`, Object.keys(value));
          }
        }
      }

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
      const eventStrings = [];
      if (event?.name) eventStrings.push(String(event.name));
      if (event?.stateName) eventStrings.push(String(event.stateName));
      if (event?.state) eventStrings.push(String(event.state));

      // –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º event.data –∫–∞–∫ –º–∞—Å—Å–∏–≤ (—Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö)
      if (event?.data && Array.isArray(event.data)) {
        console.log('üéØ Processing event.data array:', event.data);
        event.data.forEach(item => {
          if (typeof item === 'string') {
            eventStrings.push(item);
            console.log('üéØ Added from data:', item);
          }
        });
      }

      if (Array.isArray(event)) {
        event.forEach(item => {
          if (item?.name) eventStrings.push(String(item.name));
          if (item?.stateName) eventStrings.push(String(item.stateName));
        });
      }

      console.log('üîç All event strings:', eventStrings);

      // –ò—â–µ–º Timeline —Å–æ–±—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ Timeline 22-30 –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω)
      eventStrings.forEach(str => {
        if (str.includes('Timeline')) {
          console.log('üéØ TIMELINE FOUND:', str);

          // Timeline 22-30 –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω (–ù–ï Timeline 5-7 –∫–æ—Ç–æ—Ä—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏)
          if (str === 'Timeline 22') {
            console.log('üö™ Timeline 22 - Opening problem 1!');
            openProblemOverlay(1);
          } else if (str === 'Timeline 23') {
            console.log('üíß Timeline 23 - Opening problem 2!');
            openProblemOverlay(2);
          } else if (str === 'Timeline 24') {
            console.log('‚ö° Timeline 24 - Opening problem 3!');
            openProblemOverlay(3);
          } else if (str.match(/Timeline (2[5-9]|30)/)) {
            // Timeline 25-30 –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const timelineNum = str.match(/Timeline (\d+)/)?.[1];
            console.log(`üìä Timeline ${timelineNum} - Additional problem`);
          } else {
            console.log('üìä Other Timeline (ignored):', str);
          }
        }
      });

      console.log('üö® ===== RIVE STATECHANGE EVENT END =====');
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
    const handleMouseMove = (event: MouseEvent) => {
      if (!canvasRef.current || !riveInstanceRef.current) return;

      const rect = canvasRef.current.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      const normalizedX = x / rect.width;
      const normalizedY = y / rect.height;

      const stateMachine = riveInstanceRef.current.stateMachineInputs('State Machine 1');
      if (stateMachine) {
        const mouseXInput = stateMachine.find(input => input.name === 'mouseX' || input.name === 'Mouse X');
        const mouseYInput = stateMachine.find(input => input.name === 'mouseY' || input.name === 'Mouse Y');

        if (mouseXInput) {
          mouseXInput.value = normalizedX;
        }
        if (mouseYInput) {
          mouseYInput.value = normalizedY;
        }
      }
    };

    const canvas = canvasRef.current;
    canvas.addEventListener('mousemove', handleMouseMove);

    return () => {
      if (riveInstanceRef.current) {
        riveInstanceRef.current.cleanup();
      }
      if (canvas) {
        canvas.removeEventListener('mousemove', handleMouseMove);
      }
    };
  }, []);

  return (
    <>
      <canvas
        ref={canvasRef}
        style={{
          width: '750px',
          height: '750px',
        }}
        width={1500}
        height={1500}
      />

      {/* MODAL OVERLAY */}
      {activeModal && problemsData[activeModal] && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          onClick={closeModal}
        >
          <div
            className={`bg-gradient-to-br ${problemsData[activeModal].color} text-white p-8 rounded-2xl shadow-2xl max-w-2xl w-full mx-4 transform transition-all duration-300 scale-100`}
            onClick={(e) => e.stopPropagation()}
            style={{ fontFamily: 'Georgia, serif' }}
          >
            <h2 className="text-3xl font-bold mb-4">
              {problemsData[activeModal].title}
            </h2>
            <p className="text-lg mb-6 opacity-90">
              {problemsData[activeModal].description}
            </p>
            <div className="bg-white bg-opacity-20 p-4 rounded-lg">
              <h3 className="text-xl font-bold mb-3">üîß –†–µ—à–µ–Ω–∏–µ:</h3>
              <pre className="text-base leading-relaxed whitespace-pre-wrap">
                {problemsData[activeModal].solution}
              </pre>
            </div>
            <p className="text-center mt-6 text-sm opacity-75">
              üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—É—é –æ–±ÔøΩÔøΩ–∞—Å—Ç—å —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å
            </p>
          </div>
        </div>
      )}
    </>
  );
}
